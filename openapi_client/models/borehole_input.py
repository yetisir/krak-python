# coding: utf-8

"""
    Krak REST API

    Krak REST API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BoreholeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'easting': 'float',
        'northing': 'float',
        'elevation': 'float'
    }

    attribute_map = {
        'name': 'name',
        'easting': 'easting',
        'northing': 'northing',
        'elevation': 'elevation'
    }

    def __init__(self, name=None, easting=None, northing=None, elevation=None, local_vars_configuration=None):  # noqa: E501
        """BoreholeInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._easting = None
        self._northing = None
        self._elevation = None
        self.discriminator = None

        self.name = name
        self.easting = easting
        self.northing = northing
        self.elevation = elevation

    @property
    def name(self):
        """Gets the name of this BoreholeInput.  # noqa: E501

        Name of the borehole  # noqa: E501

        :return: The name of this BoreholeInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoreholeInput.

        Name of the borehole  # noqa: E501

        :param name: The name of this BoreholeInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def easting(self):
        """Gets the easting of this BoreholeInput.  # noqa: E501

        Easting position of the collar  # noqa: E501

        :return: The easting of this BoreholeInput.  # noqa: E501
        :rtype: float
        """
        return self._easting

    @easting.setter
    def easting(self, easting):
        """Sets the easting of this BoreholeInput.

        Easting position of the collar  # noqa: E501

        :param easting: The easting of this BoreholeInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and easting is None:  # noqa: E501
            raise ValueError("Invalid value for `easting`, must not be `None`")  # noqa: E501

        self._easting = easting

    @property
    def northing(self):
        """Gets the northing of this BoreholeInput.  # noqa: E501

        Nonrthing position of the collar  # noqa: E501

        :return: The northing of this BoreholeInput.  # noqa: E501
        :rtype: float
        """
        return self._northing

    @northing.setter
    def northing(self, northing):
        """Sets the northing of this BoreholeInput.

        Nonrthing position of the collar  # noqa: E501

        :param northing: The northing of this BoreholeInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and northing is None:  # noqa: E501
            raise ValueError("Invalid value for `northing`, must not be `None`")  # noqa: E501

        self._northing = northing

    @property
    def elevation(self):
        """Gets the elevation of this BoreholeInput.  # noqa: E501

        Elevation position of the collar  # noqa: E501

        :return: The elevation of this BoreholeInput.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this BoreholeInput.

        Elevation position of the collar  # noqa: E501

        :param elevation: The elevation of this BoreholeInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and elevation is None:  # noqa: E501
            raise ValueError("Invalid value for `elevation`, must not be `None`")  # noqa: E501

        self._elevation = elevation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoreholeInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoreholeInput):
            return True

        return self.to_dict() != other.to_dict()
