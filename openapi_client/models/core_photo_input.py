# coding: utf-8

"""
    Krak REST API

    Krak REST API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CorePhotoInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'photo': 'file',
        'borehole_id': 'int',
        'depth_from': 'float',
        'depth_to': 'float',
        'crop_corners': 'list[CorePhotoInputCropCorners]'
    }

    attribute_map = {
        'photo': 'photo',
        'borehole_id': 'borehole_id',
        'depth_from': 'depth_from',
        'depth_to': 'depth_to',
        'crop_corners': 'crop_corners'
    }

    def __init__(self, photo=None, borehole_id=None, depth_from=None, depth_to=None, crop_corners=None, local_vars_configuration=None):  # noqa: E501
        """CorePhotoInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._photo = None
        self._borehole_id = None
        self._depth_from = None
        self._depth_to = None
        self._crop_corners = None
        self.discriminator = None

        if photo is not None:
            self.photo = photo
        if borehole_id is not None:
            self.borehole_id = borehole_id
        if depth_from is not None:
            self.depth_from = depth_from
        if depth_to is not None:
            self.depth_to = depth_to
        if crop_corners is not None:
            self.crop_corners = crop_corners

    @property
    def photo(self):
        """Gets the photo of this CorePhotoInput.  # noqa: E501


        :return: The photo of this CorePhotoInput.  # noqa: E501
        :rtype: file
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this CorePhotoInput.


        :param photo: The photo of this CorePhotoInput.  # noqa: E501
        :type: file
        """

        self._photo = photo

    @property
    def borehole_id(self):
        """Gets the borehole_id of this CorePhotoInput.  # noqa: E501


        :return: The borehole_id of this CorePhotoInput.  # noqa: E501
        :rtype: int
        """
        return self._borehole_id

    @borehole_id.setter
    def borehole_id(self, borehole_id):
        """Sets the borehole_id of this CorePhotoInput.


        :param borehole_id: The borehole_id of this CorePhotoInput.  # noqa: E501
        :type: int
        """

        self._borehole_id = borehole_id

    @property
    def depth_from(self):
        """Gets the depth_from of this CorePhotoInput.  # noqa: E501


        :return: The depth_from of this CorePhotoInput.  # noqa: E501
        :rtype: float
        """
        return self._depth_from

    @depth_from.setter
    def depth_from(self, depth_from):
        """Sets the depth_from of this CorePhotoInput.


        :param depth_from: The depth_from of this CorePhotoInput.  # noqa: E501
        :type: float
        """

        self._depth_from = depth_from

    @property
    def depth_to(self):
        """Gets the depth_to of this CorePhotoInput.  # noqa: E501


        :return: The depth_to of this CorePhotoInput.  # noqa: E501
        :rtype: float
        """
        return self._depth_to

    @depth_to.setter
    def depth_to(self, depth_to):
        """Sets the depth_to of this CorePhotoInput.


        :param depth_to: The depth_to of this CorePhotoInput.  # noqa: E501
        :type: float
        """

        self._depth_to = depth_to

    @property
    def crop_corners(self):
        """Gets the crop_corners of this CorePhotoInput.  # noqa: E501

        list of corner coordinates to crop the photo with  # noqa: E501

        :return: The crop_corners of this CorePhotoInput.  # noqa: E501
        :rtype: list[CorePhotoInputCropCorners]
        """
        return self._crop_corners

    @crop_corners.setter
    def crop_corners(self, crop_corners):
        """Sets the crop_corners of this CorePhotoInput.

        list of corner coordinates to crop the photo with  # noqa: E501

        :param crop_corners: The crop_corners of this CorePhotoInput.  # noqa: E501
        :type: list[CorePhotoInputCropCorners]
        """

        self._crop_corners = crop_corners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorePhotoInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CorePhotoInput):
            return True

        return self.to_dict() != other.to_dict()
